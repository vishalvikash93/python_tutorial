1. Basic Syntax and Operations
2. Write a Python program to swap two variables without using a temporary variable.
   Create a program that takes a list of numbers and prints the sum, average, maximum, and minimum of the list.
   Write a Python program to check if a number is prime.
   Create a program that prints the Fibonacci sequence up to a given number of terms.
3. String
    1.Reverse a String
    Write a program that takes a string as input and prints the reversed string using slicing.
    2.	Extract a Substring
    Take a string and two indices as input. Print the substring from the given
     start index to the end index (excluding the end index).
    3.	Check for Palindrome
    Write a program to check whether the given string is a palindrome or not using slicing.
    4.	Find and Replace a Word
    Take a sentence and a word as input. If the word exists in the sentence, replace it with "Python", otherwise print "Word not found".
    5.	Extract Every Second Character
    Given a string, print every second character using slicing.
    6.	Check First and Last Character
    Take a string as input and check whether the first and last characters are the same (ignoring case).
    7.	Convert First Letter of Each Word to Uppercase
    Write a program that takes a sentence as input and prints the initials of each word in uppercase.
4. List
    1. How can you reverse a Python list?
    2. How do you check if an item exists in a Python list?
    3. What method would you use to concatenate two lists in Python?
    4. How do you find the length of a list in Python?
    5. How do you sort a list in Python, and what are the options for sorting (ascending vs descending)?
    6. How would you remove duplicates from a Python list
5. Tuple.
    1.What is a tuple in Python, and how is it different from a list?
    2. How do you create a tuple in Python?
    3. Can you modify the elements of a tuple once it is created? Why or why not?
    4. How do you access elements in a tuple?
    5. How can you convert a tuple into a list and vice versa?
6. Set
    1. Write a Python program to find the union of two sets.
    Input:
        Set A: {1, 2, 3, 4}
        Set B: {3, 4, 5, 6}
    2. Write a Python program to find the intersection of two sets.
    Input:
        Set A: {1, 2, 3, 4}
        Set B: {3, 4, 5, 6}
    3. Write a Python program to find the difference between two sets, i.e., elements that are in Set A but not in Set B.
    Input:
        Set A: {1, 2, 3, 4, 5}
        Set B: {3, 4, 5, 6, 7}
    4. Write a Python program to check if one set is a subset of another.
    Input:
        Set A: {1, 2, 3}
        Set B: {1, 2, 3, 4, 5}
7. Dictionary
    1. Write a Python program to merge two dictionaries. If there are any common keys, their values should be summed.
        Dictionary A: {'a': 10, 'b': 20}
        Dictionary B: {'b': 30, 'c': 40}
    2. Write a Python program to find the key with the highest value in a dictionary.
        Dictionary: {'a': 5, 'b': 10, 'c': 3, 'd': 7}
    3. Write a Python program to remove a key from a dictionary. If the key does not exist, handle it gracefully.
        Dictionary: {'a': 1, 'b': 2, 'c': 3}
        Key to remove: 'b'
    4. Write a Python program to check if a key exists in a dictionary.
        Dictionary: {'a': 100, 'b': 200}
8. List comprehension
    1. Write a Python program using list comprehension to generate a list of all odd numbers between 1 and 20.
       Range: 1 to 20
    2. Write a Python program using list comprehension to convert a list of temperatures from Celsius to Fahrenheit.
       List of Celsius temperatures: [0, 10, 20, 30, 40]
    3. Write a Python program using list comprehension to flatten a nested list.
       Nested List: [[1, 2, 3], [4, 5], [6, 7]]
9. Dict comprehension
    1. Write a dictionary comprehension that creates a dictionary with even numbers from 1 to 20 as keys, and their squares as values.
    2. Given a dictionary {1: 'a', 2: 'b', 3: 'c'}, use dictionary comprehension to swap the keys and values.
    3. Given a string "interview", use dictionary comprehension to create a dictionary where the keys are the characters and the values are their frequencies in the string.
    4. Given a dictionary {1: 10, 2: 15, 3: 20, 4: 25, 5: 30}, use dictionary comprehension to filter only the keys whose values are even.
10. High end function.
    1. Write a Python program using map() to square each number in the given list
    2. Given a list of lowercase strings, use map() to convert them to uppercase.
    3. Find the length of each word in a list.
    4. extract even numbers from a list.
    5. Find words with length greater than 4.
    6. Write a function to check if a number is prime and use filter() to extract prime numbers.
    7. Sum of all elements in a list.
    8. Find the maximum number in a list.
    9. Find the product of all elements in a list.
    10.Concatenate all strings in a list.
    11. Given a list of numbers, first use map() to square them.
        Then, use filter() to keep only the even squares.
        Finally, use reduce() to find the sum of these even squares.
11. Functions
    1. Write a Python function called greet that takes a name as a parameter and prints out "Hello, <name>!" (e.g., greet("Shruti") should output "Hello, Shruti!").
    2. Write a Python function sum_of_numbers that takes two numbers as arguments and returns their sum
    3. Write a function calculate_area that calculates the area of a rectangle. It should take two arguments, length and width, with default values of 5 and 10, respectively. If no arguments are passed, it should use these default values.
    4. Write a function introduce that accepts keyword arguments first_name and last_name and prints out a sentence "My name is Harsh Anand."
    5. Write a function average that accepts any number of numeric arguments and returns their average. Use the *args syntax.
    6. Write a lambda function that takes two arguments and returns their product. Use this lambda function to calculate the product of 4 and 5
    7. Write a recursive Python function to calculate the factorial of a number n (i.e., n! = n * (n-1) * ... * 1)
    8. Write a function even_numbers that takes a list of integers and returns a new list containing only the even numbers from the original list, using list comprehension.
    9. Write a function that takes a string and returns the string reversed.
    10.Create a function that takes a list of numbers and returns a new list with only the odd numbers.

12. File Operations
    1. Write a Python program to create a new text file called sample.txt and write "Hello, World!" into it.
    2. Write a Python program to read the contents of sample.txt and print them to the console.
    3. Modify your program to append the text "Welcome to Python file handling!" to sample.txt.
    4. Write a program to read a file line by line and print each line.
    5. Modify the above program to store all lines in a list and print them.
    6. Write a function that reads a file and counts the number of lines in it.
    7. Write a Python program to read only the first 5 lines of a file.
    8. Write a Python program that reads a CSV file called employees.csv and prints all employee names.
    9. Write a Python program that writes a dictionary of student marks into a JSON file named marks.json.
    10. Read a JSON file called config.json and print its contents as a dictionary
    11. Write a Python program to count the number of words in a given text file.
    12. Write a function that searches for a specific word in a file and prints the line numbers where it appears.
    13. Write a Python script that reads a large text file line by line using a generator function.
    14. Write a program to find and replace a word in a text file.
    15. Write a Python script that copies contents from one file to another.
    16. Write a Python script to count the number of words in a text file.
    17. Modify the script to count the frequency of each word in the file.
    18. Write a program that finds and replaces a word in a file.
    19. Write a Python program to merge two text files into a third file.
    20. Write a script to copy the contents of one file to another.
13. Generator.
    1. Write a generator function countdown(n) that yields numbers from n to 0.
    2. Create a generator even_numbers(n) that yields the first n even numbers.
    3. Write a generator function fibonacci(n) that generates the first n Fibonacci numbers.
    4. Create a generator square_numbers(n) that yields the square of numbers from 1 to n.
    5. Write a generator char_generator() that yields each character from a given string one by one.
    6. Implement a generator prime_numbers(limit) that yields all prime numbers up to limit
    7. Modify the Fibonacci generator so that it stops when a number exceeds 1000.

14. Decorator
    1. Write a decorator uppercase_decorator that converts the output of a function to uppercase.
    2. Implement a decorator execution_time_decorator that measures the execution time of a function.
    3. Write a decorator repeat_decorator(n) that calls a function n times.
    4. Create a decorator logger_decorator that logs function calls and their arguments.
    5. Implement a decorator only_positive that raises an error if the function is called with negative numbers.
